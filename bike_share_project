import time
import pandas as pd
import numpy as np

CITY_DATA = {'chicago': 'D:\DataAdel\chicago.csv',
             'new york city': 'D:\DataAdel\new_york_city.csv',
             'washington': 'D:\DataAdel\washington.csv'}

cities_list = ['chicago', 'new york', 'washington']
month_list = ['january', 'february', 'march', 'april', 'may', 'june', 'all']
days_list = ['0', '1', '2', '3', '4', '5', '6', '7']


def input_valid(input_choose, input_type):
    """
    check the validity of user input.
    input_choose: Parameter of  user input
    input_type: is the type of input: 1 = city, 2 = month, 3 = day
    """
    while True:
        diff_input = input(input_choose).lower()
        try:
            if diff_input in cities_list and input_type == 1:
                break
            elif diff_input in month_list and input_type == 2:
                break
            elif diff_input in days_list and input_type == 3:
                break
            else:
                if diff_input not in cities_list and input_type == 1:
                    print(
                        "Sorry, your input should be: chicago , new york or washington")
                if diff_input not in month_list and input_type == 2:
                    print(
                        "Sorry, your input should be: january, february, march, april, may, june or all")
                if diff_input not in days_list and input_type == 3:
                    print(
                        "Sorry, your input should be: number from 0 : 7 as previous mention")
        except ValueError:
            print("Sorry, your input is wrong")
    return diff_input


def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # choose city, user want to analyze
    city = input_valid(
        "Would you like to see the data for chicago, new york city or washington?  ", 1)
    # month of these data

    month = input_valid("Which Month (all, january, ... june)?", 2)
    # day of week, here we make user to enter instead of writ day
    day = input_valid("*************************\n" +
                      "Please, input number of day to get data\n "+"**************************\n"
                      + "0 : Monday     1 : Tuseday   2: Wedensday \n3 : Thursday   4 : Friday    5 : Saturday\n6 : Sunday     7 : All Days : ", 3)
    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])

    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # extract month,  from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    # exract day of week,
    df['day_of_week'] = df['Start Time'].dt.dayofweek
    # extract  hour
    df['hour'] = df['Start Time'].dt.hour

    # filter by month if applicable
    if month != 'all':
        # get int of month extracted
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1

        # filter by month to create the new dataframe
        df = df[df['month'] == month]

        # filter by day of week
    if day != '7':

        days = ['0', '1', '2',
                '3', '4', '5', '6']
        day = days.index(day) + 1
        df = df[df['day_of_week'] == day]
    else:
        print("this day is not avialable")
    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # display the most common month
    month_mode = df['month'].mode()[0]

    print('Most Popular Month:', month_mode)

    # display the most common day of week
    most_day = df['day_of_week'].mode()[0]

    print('Most Day Of Week:', most_day)

    # display the most common start hour
    most_start_hour = df['hour'].mode()[0]

    print('Most Common Start Hour :\n', most_start_hour)

    print("This took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('Calculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    popular_start_station = df['Start Station'].mode()[0]

    print('Most Start Station : \n', popular_start_station)

    # display most commonly used end station
    most_end_station = df['End Station'].mode()[0]

    print('Most End Station:\n', most_end_station)

    # display most frequent combination of start station and end station trip
    group_field = df.groupby(['Start Station', 'End Station'])
    combination_station = group_field.size().sort_values(ascending=False).head(1)
    print('Most frequent combination of Start Station and End Station trip:\n',
          combination_station)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    sum_travel_time = df['Trip Duration'].sum()

    print('Total Travel Time in ns:\n', sum_travel_time)

    # display mean travel time
    average_travel_time = df['Trip Duration'].mean()

    print('Mean Travel Time:', average_travel_time)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df, city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    print('User Type Stats:')
    print(df['User Type'].value_counts())
    if city != 'washington':
        # Display counts of gender
        print('Gender Stats:')
        print(df['Gender'].value_counts())
        # Display earliest, most recent, and most common year of birth
        print('Birth Year Stats:')
        most_common_year = df['Birth Year'].mode()[0]
        print('Most Common Year:', most_common_year)
        most_recent_year = df['Birth Year'].max()
        print(' Recent Year:', most_recent_year)
        earliest_year = df['Birth Year'].min()
        print('Earliest Year:', earliest_year)
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        display = input(
            "Do you want to display datafram for raw data you choosed? yes (Show Data frame) or no (Direct Calculations): ")
        while True:

            try:
                if display.lower() == "yes":
                    print(df.head())
                    print("*"*60)
                    time_stats(df)
                    station_stats(df)
                    trip_duration_stats(df)
                    user_stats(df, city)
                    break
                elif display.lower() == "no":
                    print("*"*60)
                    time_stats(df)
                    station_stats(df)
                    trip_duration_stats(df)
                    user_stats(df, city)
                    break
            except:
                print("there is invalid input yes or no")

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
    main()
